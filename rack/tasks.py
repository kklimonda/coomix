"""
A celery tasks for interacting with dosage.
"""
import json
import os
import shutil

from celery import Celery
from dosagelib.director import ComicGetter
from django.conf import settings
from subprocess import Popen, PIPE

from rack.models import DosageUpdateReport
from rack.models import Strip

app = Celery('tasks', broker='django://')

def _parse_json_data(json_path):
    """ Parse the Json data generated by Dosage.

    dosage stores some info about each comic and strip downloaded
    in the requested format (json in our case). That file provides us
    with a data about each strip, some of which can have multiple images.
    """

    with open(json_path, 'r') as fh:
        json_data = json.load(fh)

    strips = []
    for url, images in json_data['pages'].items():
        strip_data = {'url': url}
        images_json = images['images']
        order = 0
        images = []
        for url, file_name in images_json.items():
            image_data = {'order': order}
            image_data['file_name'] = file_name

            images.append(image_data)
            order += 1
        strip_data['images'] = images
        strips.append(strip_data)
    return strips


def _execute_dosage(comic):
    command = (
        '/home/kklimonda/code/personal/coomix/venv/bin/dosage',
        '--basepath', settings.DOSAGE_BASEPATH,
        '--output', 'json', '--adult', comic.dosage_name
    )
    p = Popen(command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()

    report = {'comic': comic}
    if p.returncode != 0:
        success = False
        report['status'] = DosageUpdateReport.Status.error
        report['stacktrace'] = stderr
        DosageUpdateReport.objects.create(**report)
    else:
        success = True
        report['status'] = DosageUpdateReport.Status.success
    DosageUpdateReport.objects.create(**report)
    return success


def _clean_dosage():
    shutil.rmtree(settings.DOSAGE_BASEPATH)


@app.task
def fetch_latest(comic):
    if not _execute_dosage(comic):
        return

    # dosage run generated a json file that stores the file name for the strip.
    json_path = os.path.join(
        settings.DOSAGE_BASEPATH, comic.dosage_name, "dosage.json"
    )
    strips = _parse_json_data(json_path)

    for strip_data in strips:
        strip = Strip.objects.get_or_create_with_images(comic, strip_data)
    _clean_dosage()
